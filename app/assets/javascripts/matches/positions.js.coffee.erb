# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

# TODO: DRY UP ANALYSIS JAVASCRIPT FILES (PULL OUT HELPER/UTILITY STUFF)
window.DOTA2RAILS.matches.components.map = (() ->
  #mapfile = "<%= asset_path 'dota_gray_blur_600x580.jpg' %>"
  mapfile = "<%= asset_path 'map_blur_desat.jpg' %>"
  rune_files = {
    'invis': "<%= asset_path 'runes/invis.png' %>",
    'haste': "<%= asset_path 'runes/haste.png' %>",
    'illusion': "<%= asset_path 'runes/illusion.png' %>",
    'doubledamage': "<%= asset_path 'runes/doubledamage.png' %>",
    'regen': "<%= asset_path 'runes/regen.png' %>",
  }
  bldg_files = {
    'radiant': {
      'rax': "<%= asset_path 'buildings/radiant_rax.png' %>",
      'tower': "<%= asset_path 'buildings/radiant_tower.png' %>",
      'ancient': "<%= asset_path 'buildings/radiant_ancient.png' %>",
    }
    'dire': {
      'rax': "<%= asset_path 'buildings/dire_rax.png' %>",
      'tower': "<%= asset_path 'buildings/dire_tower.png' %>",
      'ancient': "<%= asset_path 'buildings/dire_ancient.png' %>",
    }
  }
  bldg_locations = {'dota_badguys_tower1_bot': {'y': -1664.0, 'x': 6016.0}, 'dota_badguys_tower1_top': {'y': 6016.0, 'x': -4736.0}, 'good_rax_range_top': {'y': -3712.0, 'x': -6912.0}, 'dota_goodguys_fort': {'y': -5376.0, 'x': -5888.0}, 'dota_goodguys_tower2_mid': {'y': -2816.0, 'x': -3584.0}, 'bad_rax_range_top': {'y': 6016.0, 'x': 3840.0}, 'dota_goodguys_tower1_mid': {'y': -1408.0, 'x': -1536.0}, 'dota_goodguys_tower3_bot': {'y': -6144.0, 'x': -3968.0}, 'bad_rax_melee_bot': {'y': 3328.0, 'x': 6528.0}, 'dota_goodguys_tower1_top': {'y': 1792.0, 'x': -6144.0}, 'dota_badguys_tower3_mid': {'y': 3712.0, 'x': 4224.0}, 'dota_goodguys_tower3_mid': {'y': -4096.0, 'x': -4608.0}, 'dota_badguys_tower4_top': {'y': 4736.0, 'x': 4864.0}, 'good_rax_melee_mid': {'y': -4608.0, 'x': -4736.0}, 'dota_badguys_tower2_bot': {'y': 256.0, 'x': 6272.0}, 'good_rax_melee_bot': {'y': -6400.0, 'x': -4352.0}, 'dota_badguys_tower2_mid': {'y': 2048.0, 'x': 2432.0}, 'dota_badguys_tower3_bot': {'y': 2944.0, 'x': 6272.0}, 'dota_badguys_tower4_bot': {'y': 4352.0, 'x': 5248.0}, 'bad_rax_melee_mid': {'y': 3712.0, 'x': 4608.0}, 'bad_rax_melee_top': {'y': 5504.0, 'x': 3840.0}, 'dota_goodguys_tower4_top': {'y': -4992.0, 'x': -5760.0}, 'bad_rax_range_bot': {'y': 3328.0, 'x': 5888.0}, 'dota_goodguys_tower2_bot': {'y': -6144.0, 'x': -640.0}, 'dota_badguys_tower2_top': {'y': 6016.0, 'x': 0.0}, 'dota_badguys_fort': {'y': 4992.0, 'x': 5504.0}, 'good_rax_melee_top': {'y': -3712.0, 'x': -6400.0}, 'bad_rax_range_mid': {'y': 4096.0, 'x': 4224.0}, 'dota_goodguys_tower1_bot': {'y': -6144.0, 'x': 4864.0}, 'dota_badguys_tower3_top': {'y': 5760.0, 'x': 3456.0}, 'dota_goodguys_tower3_top': {'y': -3328.0, 'x': -6656.0}, 'dota_badguys_tower1_mid': {'y': 256.0, 'x': 1024.0}, 'dota_goodguys_tower4_bot': {'y': -5248.0, 'x': -5504.0}, 'good_rax_range_mid': {'y': -4224.0, 'x': -5120.0}, 'good_rax_range_bot': {'y': -5888.0, 'x': -4352.0}, 'dota_goodguys_tower2_top': {'y': -896.0, 'x': -6144.0}}
  ward_files = {
    'radiant': {
      'obs': "<%= asset_path 'wards/radiant_minimap_ward.png' %>",
      'sentry': "<%= asset_path 'wards/radiant_minimap_sentry.png' %>",
    },
    'dire': {
      'obs': "<%= asset_path 'wards/dire_minimap_ward.png' %>",
      'sentry': "<%= asset_path 'wards/dire_minimap_sentry.png' %>",
    }
  }

  world_to_img = (x,y) ->
    x: (8576.0 + x) * 0.0366 + -22.4219,
    y: (8192.0 - y) * 0.0368 + -2.5158
  mapw = 580
  maph = 580

  # we want these variables to persist between init and update funcs
  positions = heroes = svg = null
  rune_container = null
  bldg_container = null
  hero_container = null
  ward_container = null
  runes = null
  bldg_hp = null
  wards = null

  init = ->
    positions = gon.match.positions
    heroes = (name for name of positions when name isnt 'time')

    runes = gon.match.runes
    bldg_hp = gon.match.building_hp
    # convert bldg locations from world coordinates to image coordinates
    for name,loc of bldg_locations
      bldg_locations[name] = world_to_img(loc['x'], loc['y'])

    wards = gon.match.wards
    for ward,_ in wards
      pos = world_to_img(ward.x, ward.y)
      ward.x = pos.x
      ward.y = pos.y


    svg = d3.select("#map").append("svg")
        .attr("width", mapw)
        .attr("height", maph)
    imgs = svg.selectAll("image").data([mapfile])
    imgs.enter().append("svg:image")
      .attr("xlink:href", (d) -> d)
      .attr("width", mapw)
      .attr("height", maph)
    rune_container = svg.append("g")
    bldg_container = svg.append("g")
    hero_container = svg.append("g")
    ward_container = svg.append("g")

  # positions map
  update = (time, time_interval) ->

    # hero position/hp data
    for pos,idx in positions['time']
      break if pos > time
    hero_data = []
    for h,i in heroes
      continue if idx > positions[h].length - 1
      hero_data.push {}
      pos = world_to_img positions[h][idx][0], positions[h][idx][1]
      team = if h in gon.match.player_teams['radiant'] then 'radiant' else 'dire'
      $.extend(hero_data[i], {name: h, team: team, hp: positions[h][idx][2]}, pos)

    # rune data
    for pos,idx in runes
      break if pos.time > time
    rune_data = []
    if idx > 0 and runes[idx - 1].event is "rune_spawn"
      r = runes[idx - 1]
      rune_data = [{}]
      pos = world_to_img r.x, r.y
      $.extend(rune_data[0], {'rune_type': r.rune_type}, pos)

    # TODO: optimization: have a queue of all building hp changes (sorted by time) and only
    #   make the bldg_data structure if the position (current time) in the queue changes?
    # building data
    bldg_data = []
    bldg_destroyed = []
    for name,threshtimes of bldg_hp
      # if the building is destroyed then mark it, else get the info to draw it and its hp bar
      if threshtimes.length > 0 and threshtimes[threshtimes.length - 1].hp is 0 and threshtimes[threshtimes.length - 1].time < time
        bldg_destroyed.push name
      else
        for threshold,idx in threshtimes
          if threshold.time > time
            break
        if idx is 0
          hp = 100
        else
          hp = threshtimes[idx - 1].hp
        team = if name.indexOf("good") isnt -1 then "radiant" else "dire"
        bldg_type = if name.indexOf("tower") isnt -1 then "tower" else (if name.indexOf("rax") isnt -1 then "rax" else "ancient")
        d = {name: name, hp: hp, team: team, type: bldg_type}
        $.extend(d, bldg_locations[name])
        bldg_data.push d
    # sort by the order they should be drawn in (top to bottom) so images in front sit on top of those behind
    bldg_data.sort((a,b) -> if a.y < b.y then -1 else (if a.y > b.y then 1 else 0))

    # ward data (already sorted by time)
    ward_data = []
    for ward,idx in wards
      if ward.time > time
        break
      if ward.event is 'add'
        ward_data.push(ward)
      else
        for w,idx in ward_data
          if w.id is ward.id
            ward_data.splice(idx, 1)
            break

    # filter bldg_data to a diff list for bldg_hpbars
    # TODO: please refactor me... so slow and bad  :'(
    isVulnerable = (bldg) ->
      get_num = /(\d)/
      team_name = if bldg.team is "radiant" then "goodguys" else "badguys"
      tower4_regex = new RegExp(team_name + "_tower3") # match any tower3
      lane = bldg.name.substr(bldg.name.length - 3)
      tower3_regex = new RegExp(team_name + "_tower3_" + lane) # match tower3 in same lane
      ancient_regex = new RegExp(team_name + "_tower4") # match any tower4
      switch bldg.type
        when "tower"
          if bldg.name.indexOf("1") isnt -1
            return true
          else
            tower_num = parseInt(bldg.name[bldg.name.search(get_num)])
            if tower_num is 4
              # return true if any tower3 of the same team is in the destroyed list
              return (bldg_destroyed.filter((name) -> tower4_regex.test(name)).length > 0)
            else
              check_tower = bldg.name.replace(tower_num, tower_num - 1)
              # return true if the previous tower (in that lane) is in the destroyed list
              return (bldg_destroyed.filter((name) -> name is check_tower).length is 1)
        when "rax"
          # return true if tower3 in the same lane is in the destroyed list
          return (bldg_destroyed.filter((name) -> tower3_regex.test(name))).length is 1
        when "ancient"
          # return true if both tower4 are in the destroyed list
          return (bldg_destroyed.filter((name) -> ancient_regex.test(name)).length is 2)

    bldg_hpdata = bldg_data.filter(isVulnerable)




    # DATA JOIN
    # TODO: group icons and hp_bars under parent element (g)
    #       and apply update movements to that single element
    #hero_icons = svg.selectAll("rect")
    #  .data(data, (d) -> d.name)
    hero_icons = hero_container.selectAll("image")
      .data(hero_data, (d) -> d.name)
    hp_bars = hero_container.selectAll("rect")
      .data(hero_data, (d) -> d.name)
    rune_icons = rune_container.selectAll("image")
      .data(rune_data)
    bldg_icons = bldg_container.selectAll("image")
      .data(bldg_data, (d) -> d.name)
    bldg_hpbars = bldg_container.selectAll("rect")
      .data(bldg_hpdata, (d) -> d.name)
    ward_icons = ward_container.selectAll("image")
      .data(ward_data, (d) -> d.id)

    # UPDATE
    hero_icons.transition().duration(time_interval).ease(d3.ease('linear'))
        .attr("x", (d) -> d['x'] - 16) # subtract half of sprite width
        .attr("y", (d) -> d['y'] - 16) # subtract half of sprite height
    hero_icons.classed('desaturate', (d) -> d['hp'] <= 0)
    hp_bars.attr("width", (d) -> d['hp'] / 100 * 32)
    hp_bars.transition().duration(time_interval).ease(d3.ease('linear'))
        .attr("x", (d) -> d['x'] - 16) # subtract half of sprite width
        .attr("y", (d) -> d['y'] + 18) # show bar 2 px below bottom of sprite
    #bldg_hp_bars
    bldg_hpbars
        .attr("width", (d) -> d.hp / 100 * 16)

    # ENTER
    #hero_icons.enter().append("rect")
    hero_icons.enter().append("svg:image")
        .attr("x", (d) -> d['x'] - 16) # subtract half of sprite width
        .attr("y", (d) -> d['y'] - 16) # subtract half of sprite height
        #.attr("width", 5)
        #.attr("height", 5)
        .attr("width", 32)
        .attr("height", 32)
        # changed this because asset path fingerprinting means I don't know
        # what the image file's name is in production
        # so, the image paths are written into the bottom of the html page
        #.attr("xlink:href", (d) -> "/assets/miniheroes/#{d['name'].substring(14)}.png")
        .attr("xlink:href", (d) -> window.DOTA2RAILS.matches.heroiconpaths[d.name])
        #.attr("viewBox", "0 0 32 32")
        #.style("fill", (d, i) -> colors[i])
    hp_bars.enter().append("rect")
        .attr("fill", (d) -> if d['team'] is "radiant" then "rgba(0,255,0,0.5)" else "rgba(255,0,0,0.5)")
        .attr("height", 2)
        .attr("width", (d) -> d['hp'] / 100 * 32)
        .attr("x", (d) -> d['x'] - 16) # subtract half of sprite width
        .attr("y", (d) -> d['y'] + 18) # subtract half of sprite height
    rune_icons.enter().append("image")
        .attr("xlink:href", (d) -> rune_files[d.rune_type])
        .attr("x", (d) -> d.x - 16)
        .attr("y", (d) -> d.y - 16)
        .attr("width", 16)
        .attr("height", 16)
    bldg_icons
      .enter().append("image")
        .attr("xlink:href", (d) -> bldg_files[d.team][d.type])
        .attr("x", (d) -> d.x - 16)
        .attr("y", (d) -> if d.type is "tower" then d.y - 24 else d.y - 16)
        .attr("width", 32)
        .attr("height", 32)
    bldg_hpbars.enter().append("rect")
        .attr("fill", (d) -> if d.team is "radiant" then "rgba(0,255,0,0.5)" else "rgba(255,0,0,0.5)")
        .attr("height", 2)
        .attr("width", (d) -> d.hp / 100 * 16) # maxwidth = 16
        .attr("x", (d) -> d.x - 8)
        .attr("y", (d) -> d.y + 8)
    ward_icons.enter().append("image")
        .attr("xlink:href", (d) -> ward_files[d.team][d.type])
        .attr("height", 12)
        .attr("width", 12)
        .attr("x", (d) -> d.x - 6)
        .attr("y", (d) -> d.y - 6)


    # ENTER + UPDATE

    # EXIT
    hero_icons.exit().remove()
    #hp_bars.exit().remove()
    rune_icons.exit().remove()
    bldg_icons.exit().remove()
    bldg_hpbars.exit().remove()
    ward_icons.exit().remove()


  #timer_tick = positions['tick'][0]
  #update_wrapper = ->
    #timer_tick += 150
    #clearInterval(timer) if data.length is 0
    #update timer_tick, data
  #timer = setInterval update_wrapper, 100
  {init: init, update: update}
)()
