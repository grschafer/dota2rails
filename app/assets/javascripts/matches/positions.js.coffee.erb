# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

# TODO: DRY UP ANALYSIS JAVASCRIPT FILES (PULL OUT HELPER/UTILITY STUFF)
window.DOTA2RAILS.matches.positions = ->
  mapfile = "<%= asset_path 'dota_gray_blur_600x580.jpg' %>"
  world_to_img = (x,y) ->
    x: (8576.0 + x) * 0.0366 + -12.4219,
    y: (8192.0 - y) * 0.0367 + -1.2082
  mapw = 600
  maph = 580

  # dota player colors
  colors = ["rgba(39, 105, 229, 1)", "rgba(92, 229, 172, 1)", "rgba(172, 0, 172, 1)", "rgba(219, 216, 9, 1)", "rgba(229, 97, 0, 1)", "rgba(229, 121, 175, 1)", "rgba(145, 163, 63, 1)", "rgba(91, 196, 223, 1)", "rgba(0, 118, 30, 1)", "rgba(148, 95, 0, 1)"];

  curtick = 0
  container = document.getElementById('map')
  positions = $(container).data('positions')
  heroes = (name for name of positions when name isnt 'tick')
  dot_size = 5
  newCanvas = document.createElement 'div'
  container.appendChild newCanvas
  draw = SVG('map').size(mapw, maph)
  image = draw.image(mapfile).size(mapw, maph)
  #rect = draw.rect(600, 580).fill('black')
  #rect.hide()
  #draw.on 'mouseover', -> rect.show()
  #draw.on 'mouseout', -> rect.hide()
  drawPt = draw.defs().rect(dot_size, dot_size)
  old = []

  # positions map
  update = (tick) ->
    console.log tick
    r.remove() for r in old
    for hero,i in heroes
      for pos,j in positions[hero]
        break if positions['tick'][j] > tick
      pt = world_to_img pos[0], pos[1]
      old.push draw.use(drawPt).fill(colors[i]).move(pt['x'], pt['y'])

  timer_tick = positions['tick'][0]
  #timer = setInterval update, 1000, -> timer_tick += 90
  update_wrapper = -> update timer_tick += 150
  timer = setInterval update_wrapper, 1000
